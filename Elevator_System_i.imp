/* Elevator_System_i
 * Author: lypess
 * Creation date: 23/07/24
 */

IMPLEMENTATION Elevator_System_i
REFINES Elevator_System_2r

VALUES
    QTD = 10;
    NUM_ELEVATOR = 1;
    TIME_CANCEL = 2;
    NUM_FLOOR = 8;
    ELEVATOR_FLOOR_DISPLAY = (0..7);
    ELEVATOR_ORDINARY_BUTTONS = (0..7)

CONCRETE_VARIABLES 
    current_floor,
    current_direction,
    status_door,
    status_work,
    status_operation,
    btn_actions_, // Talvez relacione com os leds(no caso podemos supor que vao ser os leds)
    btn_special,
    display_floor_,// andares
    display_direction_elevator, // direçao do elevador
    time,
    sensor_pir,
    sensor_balance,
    ask_to_repair,
    people_in_elevator_2ref_,
    behavior_up,
    behavior_down,
    floor_leds_up_,
    floor_leds_down_,
    cancel_set_2ref_,
    cancel_set_floor_up_2ref_,
    cancel_set_floor_down_2ref_,
    state_blink_,
    ptr_qtd,
    time_door,
    time_floor_up,
    time_floor_down,
    alarm_door   

INVARIANT
    people_in_elevator_2ref_ : (0..QTD-1) --> NAT
    & display_floor_ : (0..7) --> BOOL
    & display_floor_(current_floor) = TRUE
    & btn_actions_ : (0..NUM_FLOOR - 1) --> BOOL 
    & state_blink_ : (0..NUM_FLOOR - 1) --> BOOL
    & floor_leds_up_ : (0..NUM_FLOOR-1) --> BOOL
    & floor_leds_down_ : (0..NUM_FLOOR-1) --> BOOL
    & cancel_set_2ref_ : (0..TIME_CANCEL-1) --> 0..NUM_FLOOR
    & cancel_set_floor_up_2ref_ : (0..TIME_CANCEL-1) --> 0..NUM_FLOOR
    & cancel_set_floor_down_2ref_ : (0..TIME_CANCEL-1) --> 0..NUM_FLOOR 
    & behavior_up : 0..(NUM_FLOOR-1) --> BOOL
    & behavior_down : 0..(NUM_FLOOR-1) --> BOOL
        
INITIALISATION
    current_floor := 3;
    current_direction := empty;
    status_door := TRUE;
    status_work := FALSE;
    status_operation := TRUE;
    btn_actions_ := (0..NUM_FLOOR - 1) * {FALSE}; // relação com o elevador; (0..NUM_FLOOR - 1) * {FALSE}
    btn_special := ELEVATOR_SPECIAL_BUTTONS * {FALSE}; // relação com o elevador;
    display_floor_ :=  (0..7) * {FALSE}; // relação com o elevador;
    display_floor_(3) := TRUE;
    time := 0;
    time_floor_up := 0;
    time_floor_down := 0;
    time_door := 1;
    sensor_pir := FALSE;
    sensor_balance := 0;
    display_direction_elevator := empty;
    ask_to_repair := FALSE;
    people_in_elevator_2ref_ := (0..QTD-1) * {0};
    behavior_up := (0..NUM_FLOOR-1) * {FALSE};
    behavior_down := (0..NUM_FLOOR-1) * {FALSE};
    floor_leds_up_ := (0..NUM_FLOOR-1) * {FALSE};
    floor_leds_down_ := (0..NUM_FLOOR-1) * {FALSE};
    cancel_set_2ref_ := (0..TIME_CANCEL-1) * {0};
    cancel_set_floor_up_2ref_ := (0..TIME_CANCEL-1) * {0};
    cancel_set_floor_down_2ref_ := (0..TIME_CANCEL-1) * {0};
    state_blink_ := (0..NUM_FLOOR - 1)  * {FALSE};
    alarm_door := FALSE;
    ptr_qtd := 1

OPERATIONS
    move = skip;
    /*move = 
    PRE
        status_work = TRUE
        & status_operation = TRUE
        
        & status_door = FALSE
        & ask_to_repair = FALSE
        & (card(dom(behavior_up /\ ((0..NUM_FLOOR-1) * {TRUE})) \/ dom(behavior_down /\ ((0..NUM_FLOOR-1) * {TRUE}))) > 0)
    THEN 
        IF min(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE}) \/ dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE}) ) = 0 THEN
            behavior_up(0) := FALSE
            || behavior_down(0) := FALSE
            || current_direction := empty
            || display_direction_elevator := empty
            || status_door := TRUE
            || status_work := FALSE
            || cancel_set_2ref_ := (0..TIME_CANCEL-1) * {0}
            || cancel_set_floor_up_2ref_ := (0..TIME_CANCEL-1) * {0}
            || cancel_set_floor_down_2ref_ := (0..TIME_CANCEL-1) * {0}
            || btn_special(btn_close) := FALSE
            || btn_actions_(current_floor) := FALSE
            || floor_leds_up_(current_floor) := FALSE
            || floor_leds_down_(current_floor) := FALSE
            || state_blink_(current_floor) := FALSE
            
        ELSE
            IF (card(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE})) = 0 or (card(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & card(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & min(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) < min(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE})))) & current_direction /= down THEN 
                 current_floor := current_floor + 1
                || current_direction := up
                || display_direction_elevator := up
                || cancel_set_2ref_ := (0..TIME_CANCEL-1) * {0}
                || cancel_set_floor_up_2ref_ := (0..TIME_CANCEL-1) * {0}
                || cancel_set_floor_down_2ref_ := (0..TIME_CANCEL-1) * {0}
                || display_floor_ := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {(display_floor_~(TRUE) + 1) |-> TRUE} 
                || behavior_up := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_up /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down :=  (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_down /\ (0..NUM_FLOOR-1) * {TRUE}}
                || status_work := TRUE
                
            ELSE
                IF ((card(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) = 0) or(card(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & card(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & min(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) > min(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE})))) & current_direction /= up THEN
                    current_floor := current_floor - 1
                    || current_direction := down
                    || display_direction_elevator := down
                    || cancel_set_2ref_ := (0..TIME_CANCEL-1) * {0}
                    || cancel_set_floor_up_2ref_ := (0..TIME_CANCEL-1) * {0}
                    || cancel_set_floor_down_2ref_ := (0..TIME_CANCEL-1) * {0}
                    || display_floor_ := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {((display_floor_~(TRUE)) - 1) |-> TRUE}
                    || behavior_up := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_up /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_down /\ (0..NUM_FLOOR-1) * {TRUE}}
                    || status_work := TRUE
                    
                ELSE 
                    IF ((card(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) = 0) or(card(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & card(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & min(dom(behavior_up /\ (0..NUM_FLOOR-1) * {TRUE})) < min(dom(behavior_down /\ (0..NUM_FLOOR-1) * {TRUE}))))& current_direction = down THEN
                        current_floor := current_floor - 1
                        || current_direction := down
                        || display_direction_elevator := down
                        || cancel_set_2ref_ := (0..TIME_CANCEL-1) * {0}
                        || cancel_set_floor_up_2ref_ := (0..TIME_CANCEL-1) * {0}
                        || cancel_set_floor_down_2ref_ := (0..TIME_CANCEL-1) * {0}
                        || display_floor_ := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {(display_floor_~(TRUE) - 1) |-> TRUE}
                        || behavior_up := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_up /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_down /\ (0..NUM_FLOOR-1) * {TRUE}}
                        || status_work := TRUE
                      
                    ELSE
                        current_floor := current_floor + 1
                        || current_direction := up
                        || display_direction_elevator := up
                        || cancel_set_2ref_ := (1..TIME_CANCEL) * {0}
                        || cancel_set_floor_up_2ref_ := (1..TIME_CANCEL) * {0}
                        || cancel_set_floor_down_2ref_ := (1..TIME_CANCEL) * {0}
                        || display_floor_ := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {(display_floor_~(TRUE) + 1) |-> TRUE} 
                        || behavior_up := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_up /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_down /\ (0..NUM_FLOOR-1) * {TRUE}}
                        || status_work := TRUE
                    END
                END
            END
        END
    END;
    */


        
    //Implementado
    elevator_operation_request(user_orders) = 
    BEGIN
        VAR f1, flag, tmp, tmp2, tmp3 IN
            f1 := 0;
            flag := TRUE;
            WHILE f1 < 8
            DO
                tmp := display_floor_(f1);
                IF f1 /= current_floor & tmp = TRUE THEN
                    flag := FALSE        
                END;
                f1 := f1 + 1
            INVARIANT
                f1 < 8
            VARIANT 
                8 - f1
            END;
            
        tmp2 := display_floor_(current_floor);
        tmp3 := btn_special(btn_phone);
        
        IF tmp2 = TRUE & flag = TRUE & sensor_balance <= 450 & sensor_balance > 0 & user_orders >= 0 & user_orders < NUM_FLOOR & status_operation = TRUE
            & tmp3 = FALSE THEN    
            
                VAR delta IN
                    delta := user_orders - current_floor;
                    IF delta < 0 THEN
                        behavior_down(current_floor - user_orders) := TRUE
                        ; btn_actions_(user_orders) := TRUE
                    ELSE
                        behavior_up(user_orders - current_floor) := TRUE
                        ; btn_actions_(user_orders) := TRUE
                    END
                END
        END
        END
    END;



    // Implementado
    elevator_operation_alarm = 
    BEGIN
       VAR flag_btn_special IN
           flag_btn_special := btn_special(btn_alarm);
           IF flag_btn_special = FALSE & status_operation = TRUE & status_work = TRUE THEN
               btn_special(btn_alarm) := TRUE 
           END
       END
    END;
        
    // Implementado
    elevator_operation_report =
    BEGIN 
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_phone);
            IF flag_btn_special = FALSE & status_work = TRUE THEN
                btn_special(btn_phone) := TRUE;
                btn_special(btn_alarm) := TRUE;
                status_operation := FALSE
            END
        END
    END;
    
    // Implementado
    elevator_operation_hold_door = 
    BEGIN
        IF status_work = FALSE & status_door = TRUE & status_operation = TRUE & alarm_door = FALSE THEN
            
            VAR ii, flag_ans, tmp_up, tmp_down IN 
                ii := 0;
                flag_ans := FALSE;
                WHILE ii < 8
                DO
                    tmp_up := behavior_up(ii);
                    tmp_down := behavior_down(ii);
                    IF tmp_up = TRUE or tmp_down = TRUE THEN
                        flag_ans := TRUE
                    END
                INVARIANT
                    ii <= 8
                VARIANT
                    8 - ii
                END;
                 IF time_door = 10 & flag_ans = TRUE THEN 
                    time_door := 1;
                    alarm_door := TRUE;
                    sensor_pir := TRUE
                ELSE IF flag_ans = TRUE THEN
                     sensor_pir := TRUE ;
                     status_door := TRUE;
                     time_door := time_door + 1
               ELSE
                 sensor_pir := TRUE;
                 status_door := TRUE;
                 time_door := 1
                END 
        
                END
                
            END
            
        END
        
    END;

    // Implementado
    elevator_operation_open_door = 
    BEGIN
        IF status_operation = TRUE & alarm_door = FALSE & current_direction = empty & sensor_balance > 0 THEN
            
            VAR ii, flag_ans, tmp_up, tmp_down IN 
                ii := 0;
                flag_ans := FALSE;
                WHILE ii < 8
                DO
                    tmp_up := behavior_up(ii);
                    tmp_down := behavior_down(ii);
                    IF tmp_up = TRUE or tmp_down = TRUE THEN
                        flag_ans := TRUE
                    END
                INVARIANT
                    ii <= 8
                VARIANT
                    8 - ii
                END;
                IF time_door = 10 & flag_ans = TRUE THEN 
                    time_door := 1;
                    alarm_door := TRUE;
                    //btn_special := btn_special <+ {btn_open |-> FALSE, btn_close |-> FALSE};
                    btn_special(btn_open) := FALSE;
                    btn_special(btn_close) := FALSE;
                    status_work := FALSE
                ELSE IF flag_ans = TRUE THEN
                    //btn_special := btn_special <+ {btn_open |-> TRUE, btn_close |-> FALSE};
                    btn_special(btn_open) := TRUE;
                    btn_special(btn_close) := FALSE;
                    status_door := TRUE;
                    time_door := time_door + 1;
                    status_work := FALSE
                   ELSE
                    btn_special(btn_open) := TRUE;
                    btn_special(btn_close) := FALSE;
                    status_door := TRUE;
                    time_door := 1;
                    status_work := FALSE
               
                    END 
                END  
                
            END      
        
        END
    END;

    // Implementado
    elevator_operation_close_door = 
    BEGIN
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_close);
            IF (flag_btn_special = FALSE & status_work = FALSE & status_operation = TRUE & status_door = TRUE & sensor_pir = FALSE) or alarm_door = TRUE THEN
                btn_special(btn_open) := FALSE;
                btn_special(btn_close) := FALSE
                ; status_door := FALSE
                ; alarm_door := FALSE
                ; time_door := 1
                ; status_work := TRUE
            END
        END
    END;

    // Implementado
    elevator_operation_let_go = 
    BEGIN
        IF sensor_pir = TRUE THEN 
            sensor_pir := FALSE;
            time_door := 1    
        END
    END;
    
    // Implementado
    elevator_operation_break_to_repair =
    BEGIN
        IF status_operation = FALSE & ask_to_repair = TRUE THEN
            VAR flag_behavior,ii, tmp_up, tmp_down IN
                flag_behavior := TRUE; // vai checar se nao tem requisicao 
                ii := 0;
                WHILE ii < NUM_FLOOR
                DO
                    tmp_up := behavior_up(ii);
                    tmp_down := behavior_down(ii);
                    IF tmp_up = TRUE or tmp_down = TRUE THEN
                        flag_behavior := FALSE    
                    END;
                    ii := ii + 1
                INVARIANT
                    ii < NUM_FLOOR
                VARIANT
                    NUM_FLOOR - ii
                END;
                
                IF flag_behavior = TRUE or current_direction = empty THEN
                    status_work := FALSE
                    ; display_direction_elevator := empty
                    ; ask_to_repair := FALSE
                    ; behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                    ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                    ; people_in_elevator_2ref_ := (0..QTD-1) * {0}
                    ; ptr_qtd := 1
                    ; sensor_balance := 0
                    ; sensor_pir := FALSE
                ELSE
                   IF (current_direction = up & current_floor /= NUM_FLOOR) or (current_floor = 1) THEN
                       // vai para o pavimento acima
                        status_work := FALSE
                        ; current_floor := current_floor + 1 
                        ; display_floor_ := (0..7) * {FALSE}
                        ; display_floor_(current_floor) := TRUE
                        ; current_direction := empty
                        ; display_direction_elevator := empty
                        ; ask_to_repair := FALSE
                        ; behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                        ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                        ; people_in_elevator_2ref_ := (0..QTD-1) * {0}
                        ; ptr_qtd := 1
                        ; sensor_balance := 0
                        ; sensor_pir := FALSE
                   ELSE IF (current_direction = down & current_floor /= 1) or (current_floor = NUM_FLOOR) THEN
                        status_work := FALSE
                        ; current_floor := current_floor - 1 
                        ; display_floor_ := (0..7) * {FALSE} 
                        ; display_floor_(current_floor) := TRUE
                        ; current_direction := empty
                        ; display_direction_elevator := empty
                        ; ask_to_repair := FALSE
                        ; behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                        ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                        ; people_in_elevator_2ref_ := (0..QTD-1) * {0}
                        ; ptr_qtd := 1
                        ; sensor_balance := 0
                        ; sensor_pir := FALSE
                    END
                   END
                END
                
            END
        END
    END;
    
    // Implementado
    elevator_operation_repaired =
    BEGIN
        IF status_operation = FALSE & status_work = FALSE THEN
            current_direction := empty
            ; status_door := TRUE
            ; status_work := FALSE
            ; status_operation := TRUE
            ; btn_actions_ := (0..NUM_FLOOR-1) * {FALSE} // relação com o elevador
            ; btn_special := ELEVATOR_SPECIAL_BUTTONS * {FALSE} // relação com o elevador
            ; display_floor_ :=  (0..7) * {FALSE}  // relação com o elevador
            ; display_floor_(current_floor) := TRUE
            ; time_door := 1
            ; sensor_pir := FALSE
            ; sensor_balance := 0
            ; display_direction_elevator := empty
            ; ask_to_repair := FALSE
            ; people_in_elevator_2ref_ := (0..QTD-1) * {0}
            ; ptr_qtd := 1
            ; behavior_up := (0..NUM_FLOOR-1) * {FALSE}
            ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
            ; floor_leds_up_ := (0..NUM_FLOOR-1) * {FALSE}
            ; floor_leds_down_ := (0..NUM_FLOOR-1) * {FALSE}
            ; cancel_set_2ref_ := (0..TIME_CANCEL-1) * {0}
            ; cancel_set_floor_up_2ref_ := (0..TIME_CANCEL-1) * {0}
            ; cancel_set_floor_down_2ref_ := (0..TIME_CANCEL-1) * {0}
            ; state_blink_ := (0..NUM_FLOOR-1)  * {FALSE}
            ; alarm_door := FALSE
        END
    END;

    // Implementado
    enter_elevator(weight) = 
    BEGIN
        IF weight > 0 & status_work = FALSE & status_door = TRUE & status_operation = TRUE & alarm_door = FALSE & ptr_qtd < 10 THEN
            sensor_balance := sensor_balance + weight;
            people_in_elevator_2ref_(ptr_qtd) := weight;
            ptr_qtd := ptr_qtd + 1
        END
    END;
    
    // Implementado
    exit_elevator =
    BEGIN 
        VAR ii, flag_ans, tmp IN
            ii := 0;
            flag_ans := FALSE;
            
            WHILE ii < QTD
            DO
                tmp := people_in_elevator_2ref_(ii);
                IF tmp /= 0 THEN
                    flag_ans := TRUE  
                END
            INVARIANT
                ii < QTD
            VARIANT
                QTD - ii
            END;
            
            IF flag_ans = TRUE & status_door = TRUE & status_operation = TRUE & status_work = FALSE & alarm_door = FALSE THEN
                sensor_balance := sensor_balance - people_in_elevator_2ref_(ptr_qtd - 1);
                people_in_elevator_2ref_(ptr_qtd - 1) := 0;
                ptr_qtd := ptr_qtd - 1
            END
        END
        
    END;


    // Implementado
    get_phone_call_from_elevator =
    BEGIN
        VAR flag_btn_special IN
           flag_btn_special := btn_special(btn_phone);
           IF flag_btn_special = TRUE THEN
              btn_special(btn_phone) := FALSE;
              btn_special(btn_alarm) := FALSE;
              ask_to_repair := TRUE;
              status_operation := FALSE
           END
        END
    END;

    // Implementado
    intermediary_call_elevator(number_floor, direction) =
    BEGIN
        VAR tmp IN
            tmp := btn_special(btn_phone);
            
            IF number_floor > 1 & number_floor < NUM_FLOOR & direction /= empty & status_operation = TRUE & tmp = FALSE & number_floor /= current_floor THEN
            IF sensor_pir = FALSE THEN
            VAR delta IN
                delta := (number_floor - current_floor);
               IF delta < 0 THEN
                    IF direction = up THEN
                        behavior_down(current_floor - number_floor) := TRUE
                        ; status_door := FALSE
                        ; status_work := TRUE
                        ; floor_leds_up_(number_floor) := TRUE
                    ELSE
                        behavior_down(current_floor - number_floor) := TRUE
                        ; status_door := FALSE
                        ; status_work := TRUE
                        ; floor_leds_down_(number_floor) := TRUE
                    END
                ELSE 
                    IF direction = up THEN
                        behavior_up(number_floor - current_floor) := TRUE
                        ; status_door := FALSE
                        ; status_work := TRUE
                        ; floor_leds_up_(number_floor) := TRUE
                    ELSE
                        behavior_up(number_floor - current_floor) := TRUE
                        ; status_door := FALSE
                        ; status_work := TRUE
                        ; floor_leds_down_(number_floor) := TRUE
                    END
                END 
            END
        ELSE
            VAR delta IN
                delta := (number_floor - current_floor);
              IF delta < 0 THEN
                    IF direction = up THEN
                        behavior_down(current_floor - number_floor) := TRUE
                        ; status_door := TRUE
                        ; status_work := FALSE
                        ; floor_leds_up_(number_floor) := TRUE
                    ELSE
                        behavior_down(current_floor - number_floor) := TRUE
                        ; status_door := TRUE
                        ; status_work := FALSE
                        ; floor_leds_down_(number_floor) := TRUE
                    END
                ELSE IF direction = up THEN
                        behavior_up(number_floor - current_floor) := TRUE
                        ; status_door := TRUE
                        ; status_work := FALSE
                        ; floor_leds_up_(number_floor) := TRUE
                    ELSE
                        behavior_up(number_floor - current_floor) := TRUE
                        ; status_door := TRUE
                        ; status_work := FALSE
                        ; floor_leds_down_(number_floor) := TRUE
                    END
                END  
            END
        END
        END
        END    
       
    END;

    // Implementado
    ground_floor_call_elevator = 
    BEGIN
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_phone);
                IF flag_btn_special = FALSE & status_operation = TRUE THEN
                    IF sensor_pir = TRUE THEN
                    behavior_down(current_floor - 1) := TRUE
                    ; floor_leds_up_(1) := TRUE
                    ; status_door := TRUE
                    ; status_work := FALSE
                ELSE
                    behavior_down(current_floor - 1) := TRUE
                    ; floor_leds_up_(1) := TRUE
                    ; status_door := FALSE
                    ; status_work := TRUE
                
                END
            END
        END
    END;
    
    // Implementado
    last_floor_call_elevator = 
    BEGIN
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_phone);
            IF status_operation = TRUE & flag_btn_special = FALSE THEN
                IF sensor_pir = TRUE THEN
                behavior_up(NUM_FLOOR - current_floor) := TRUE
                ; floor_leds_down_(NUM_FLOOR) := TRUE
                ; status_door := TRUE
                ; status_work := FALSE
            ELSE
                behavior_up(NUM_FLOOR - current_floor) := TRUE
                ; floor_leds_down_(NUM_FLOOR) := TRUE
                ; status_door := FALSE
                ; status_work := TRUE
            END
            END
        END
    END;
    
    // Implementado
    cancel(num_floor) =
    BEGIN
        VAR flag_btn_actions_, flag_single_req, ii, count, flag_cancel IN
            flag_btn_actions_ := btn_actions_(num_floor);
            flag_single_req := FALSE;
            ii := 0;
            count := 0;
            flag_cancel := FALSE;
            
            VAR cond1, cond2 IN
                cond1 := cancel_set_2ref_(0);
                cond2 := cancel_set_2ref_(1);
                IF cond1 = num_floor & cond2 = num_floor THEN
                    flag_cancel := TRUE
                END
            END;
                
            WHILE ii < 8
            DO
                VAR cond IN
                    cond := behavior_up(ii);
                    IF cond = TRUE THEN
                       count := count + 1
                    END
                END;
                VAR cond IN
                    cond := behavior_down(ii);
                    IF cond = TRUE THEN
                        count := count + 1
                    END
                END
                
            INVARIANT
                ii <= 8
            VARIANT 
                ii - 8
            END;
                   
            IF num_floor > 0 & flag_btn_actions_ = TRUE & status_operation = TRUE THEN
                IF flag_cancel = TRUE THEN
                    VAR delta IN
                        delta := (num_floor - current_floor);
                       IF count = 1 THEN
                        state_blink_(num_floor) := TRUE
                        ELSE IF delta < 0 THEN
                            behavior_down(current_floor - num_floor) := FALSE
                            ; btn_actions_(num_floor) := FALSE
                            ; current_direction := empty
                            ; display_direction_elevator := empty
                            ; state_blink_(num_floor) := FALSE
                        ELSE 
                            behavior_up(num_floor - current_floor) := FALSE
                            ; btn_actions_(num_floor) := FALSE
                            ; current_direction := empty
                            ; display_direction_elevator := empty
                            ; state_blink_(num_floor) := FALSE
                        END
                        END 
                    END
                ELSE IF time < 2 THEN
                    time := time + 1;
                    cancel_set_2ref_(time) := num_floor;
                    state_blink_(num_floor) := FALSE
                ELSE 
                    time := 1;
                    cancel_set_2ref_(time) := num_floor;
                    state_blink_(num_floor) := FALSE
                END
            END
          END
       END
    END;
    
    cancel_floor(num_floor, direction) =
    BEGIN
        VAR flag_leds_up, flag_leds_down, flag_cancel_up, flag_cancel_down, ii, count IN
            flag_leds_up := FALSE;
            flag_leds_down := FALSE;
            flag_cancel_up := FALSE;
            flag_cancel_down := FALSE;
            ii := 0;
            count := 0;
            
            VAR cond IN
                cond := floor_leds_up_(num_floor);
                IF cond = TRUE THEN 
                   flag_leds_up := TRUE
                END
            END;
            
            VAR cond IN
                cond := floor_leds_down_(num_floor);
                IF cond = TRUE THEN 
                   flag_leds_down := TRUE
                END
            END;
            
            VAR cond1, cond2 IN
                cond1 := cancel_set_floor_up_2ref_(0);
                cond2 := cancel_set_floor_up_2ref_(1);
                IF cond1 = num_floor & cond2 = num_floor THEN
                    flag_cancel_up := TRUE
                END
            END;
            
            VAR cond1, cond2 IN
                cond1 := cancel_set_floor_down_2ref_(0);
                cond2 := cancel_set_floor_down_2ref_(1);
                IF cond1 = num_floor & cond2 = num_floor THEN
                    flag_cancel_down := TRUE
                END
            END;
            ii := 0;
            WHILE ii < 8
            DO
                VAR cond1, cond2 IN
                   cond1 := behavior_up(ii);
                   cond2 := behavior_down(ii);
                   IF cond1 = TRUE THEN
                       count := count + 1
                    END;
                    IF cond2 = TRUE THEN
                        count := count + 1
                    END 
                END
                
            INVARIANT
                ii <= 8
            VARIANT 
                ii - 8
            END;
     
            IF num_floor /= current_floor & (((direction = up) & (flag_leds_up = TRUE)) or ((direction = down) & (flag_leds_down = TRUE))) & status_operation = TRUE & direction /= empty THEN
                IF direction = up THEN
                    IF flag_cancel_up = TRUE THEN
                        IF count = 1 THEN
                            IF current_direction = up THEN
                                behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                                ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                                ; floor_leds_up_(num_floor) := FALSE
                                ; floor_leds_down_(num_floor) := FALSE
                                ; current_direction := empty
                                ; display_direction_elevator := empty
                                ; current_floor := current_floor + 1 
                                ; display_floor_(current_floor) := TRUE
                                ; display_floor_(current_floor-1) := FALSE
                                
                             ELSE IF current_direction = down THEN
                                behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                                ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                                ; floor_leds_up_(num_floor) := FALSE
                                ; floor_leds_down_(num_floor) := FALSE
                                ; current_direction := empty
                                ; display_direction_elevator := empty
                                ; current_floor := current_floor - 1
                                ; display_floor_(current_floor) := TRUE
                                ; display_floor_(current_floor+1) := FALSE
                                 
                             ELSE
                                behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                                ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                                ; floor_leds_up_(num_floor) := FALSE
                                ; floor_leds_down_(num_floor) := FALSE
                                ; current_direction := empty
                                ; display_direction_elevator := empty
                                 
                           
                             END
                        END
                        
                        ELSE IF current_floor > num_floor THEN
                            behavior_down(current_floor - num_floor) := FALSE
                            ; floor_leds_up_(num_floor) := FALSE
                            ; floor_leds_down_(num_floor) := FALSE
                            ; current_direction := empty
                            ; display_direction_elevator := empty
                   
                        ELSE 
                            behavior_up(num_floor - current_floor) := FALSE
                            ; floor_leds_up_(num_floor) := FALSE
                            ; floor_leds_down_(num_floor) := FALSE
                            ; current_direction := empty
                            ; display_direction_elevator := empty
                   
                        END
                    END
                    
                ELSE IF time_floor_up < 2 THEN
                    time_floor_up := time_floor_up + 1;
                    cancel_set_floor_up_2ref_(time_floor_up) := num_floor
                   
                ELSE 
                    time_floor_up := 1;
                    cancel_set_floor_up_2ref_(time_floor_up) := num_floor
                END
                END
            ELSE
                IF flag_cancel_down = TRUE THEN 
                        IF count = 1 THEN
                            IF current_direction = up THEN
                                behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                                ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                                ; floor_leds_up_(num_floor) := FALSE
                                ; floor_leds_down_(num_floor) := FALSE
                                ; current_direction := empty
                                ; display_direction_elevator := empty
                                ; current_floor := current_floor + 1 
                                ; display_floor_(current_floor) := TRUE
                                ; display_floor_(current_floor-1) := FALSE
                                
                             ELSE IF current_direction = down THEN
                                behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                                ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                                ; floor_leds_up_(num_floor) := FALSE
                                ; floor_leds_down_(num_floor) := FALSE
                                ; current_direction := empty
                                ; display_direction_elevator := empty
                                ; current_floor := current_floor - 1
                                ; display_floor_(current_floor) := TRUE
                                ; display_floor_(current_floor+1) := FALSE
                                 
                             ELSE
                                behavior_up := (0..NUM_FLOOR-1) * {FALSE}
                                ; behavior_down := (0..NUM_FLOOR-1) * {FALSE}
                                ; floor_leds_up_(num_floor) := FALSE
                                ; floor_leds_down_(num_floor) := FALSE
                                ; current_direction := empty
                                ; display_direction_elevator := empty
                                 
                           
                             END
                        END
                        
                        ELSE IF current_floor > num_floor  THEN
                            behavior_down(current_floor - num_floor) := FALSE
                            ; floor_leds_up_(num_floor) := FALSE
                            ; floor_leds_down_(num_floor) := FALSE
                            ; current_direction := empty
                            ; display_direction_elevator := empty
                   
                        ELSE 
                            behavior_up(num_floor - current_floor) := FALSE
                            ; floor_leds_up_(num_floor) := FALSE
                            ; floor_leds_down_(num_floor) := FALSE
                            ; current_direction := empty
                            ; display_direction_elevator := empty
                   
                        END
                        END
                        
                    ELSE IF time_floor_down < 2 THEN
                        time_floor_down := time_floor_down + 1;
                        cancel_set_floor_down_2ref_(time_floor_down) := num_floor
                        
                    ELSE
                        time_floor_down := 1;
                        cancel_set_floor_down_2ref_(time_floor_down) := num_floor
                    END
                    END
             END       
         END
      END
    END
 END
