/* Elevator_System_i
 * Author: lypess
 * Creation date: 23/07/24
 */

IMPLEMENTATION Elevator_System_i
REFINES Elevator_System_2r

CONCRETE_VARIABLES 
    current_floor,
    current_direction,
    status_door,
    status_work,
    status_operation,
    btn_actions, // Talvez relacione com os leds(no caso podemos supor que vao ser os leds)
    btn_special,
    display_floor,// andares
    display_direction_elevator, // direçao do elevador
    time,
    sensor_pir,
    sensor_balance,
    ask_to_repair,
    people_in_elevator_2ref,
    behavior_up_ref,
    behavior_down_ref,
    floor_leds_up,
    floor_leds_down,
    cancel_set_2ref,
    cancel_set_floor_up_2ref,
    cancel_set_floor_down_2ref,
    state_blink,
    ptr_qtd,
    time_door,
    time_floor_up,
    time_floor_down,
    alarm_door   

INVARIANT
    people_in_elevator_2ref : (0..QTD-1) --> NAT
    & display_floor : (0..NUM_FLOOR - 1) --> BOOL
    & display_floor(current_floor) = TRUE
    & btn_actions : (0..NUM_FLOOR - 1) --> BOOL 
    & state_blink : (0..NUM_FLOOR - 1) --> BOOL

INITIALISATION
    current_floor := 3;
    current_direction := empty;
    status_door := TRUE;
    status_work := FALSE;
    status_operation := TRUE;
    btn_actions := (0..NUM_FLOOR - 1) * {FALSE}; // relação com o elevador;
    btn_special := ELEVATOR_SPECIAL_BUTTONS * {FALSE}; // relação com o elevador;
    display_floor :=  (0..NUM_FLOOR - 1) * {FALSE} <+ {3 |-> TRUE}; // relação com o elevador;
    time := 0;
    time_floor_up := 0;
    time_floor_down := 0;
    time_door := 1;
    sensor_pir := FALSE;
    sensor_balance := 0;
    display_direction_elevator := empty;
    ask_to_repair := FALSE;
    people_in_elevator_2ref := (0..QTD-1) * {0};
    behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE};
    behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE};
    floor_leds_up := ELEVATOR_ORDINARY_BUTTONS * {FALSE};
    floor_leds_down := ELEVATOR_ORDINARY_BUTTONS * {FALSE};
    cancel_set_2ref := (1..TIME_CANCEL) * {0};
    cancel_set_floor_up_2ref := (1..TIME_CANCEL) * {0};
    cancel_set_floor_down_2ref := (1..TIME_CANCEL) * {0};
    state_blink := (0..NUM_FLOOR - 1)  * {FALSE};
    alarm_door := FALSE;
    ptr_qtd := 1


OPERATIONS
 
    move = 
    PRE
        status_work = TRUE
        & status_operation = TRUE
        
        & status_door = FALSE
        & ask_to_repair = FALSE
        & (card(dom(behavior_up_ref /\ ((0..NUM_FLOOR-1) * {TRUE})) \/ dom(behavior_down_ref /\ ((0..NUM_FLOOR-1) * {TRUE}))) > 0)
    THEN 
        IF min(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}) \/ dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE}) ) = 0 THEN
            behavior_up_ref(0) := FALSE
            || behavior_down_ref(0) := FALSE
            || current_direction := empty
            || display_direction_elevator := empty
            || status_door := TRUE
            || status_work := FALSE
            || cancel_set_2ref := (1..TIME_CANCEL) * {0}
            || cancel_set_floor_up_2ref := (1..TIME_CANCEL) * {0}
            || cancel_set_floor_down_2ref := (1..TIME_CANCEL) * {0}
            || btn_special(btn_close) := FALSE
            || btn_actions(current_floor) := FALSE
            || floor_leds_up(current_floor) := FALSE
            || floor_leds_down(current_floor) := FALSE
            || state_blink(current_floor) := FALSE
            
        ELSE
            IF (card(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) = 0 or (card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & card(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & min(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) < min(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})))) & current_direction /= down THEN 
                 current_floor := current_floor + 1
                || current_direction := up
                || display_direction_elevator := up
                || cancel_set_2ref := (1..TIME_CANCEL) * {0}
                || cancel_set_floor_up_2ref := (1..TIME_CANCEL) * {0}
                || cancel_set_floor_down_2ref := (1..TIME_CANCEL) * {0}
                || display_floor := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {(display_floor~(TRUE) + 1) |-> TRUE} 
                || behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down_ref :=  (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                || status_work := TRUE
                
            ELSE
                IF ((card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) = 0) or(card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & card(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & min(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > min(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})))) & current_direction /= up THEN
                    current_floor := current_floor - 1
                    || current_direction := down
                    || display_direction_elevator := down
                    || cancel_set_2ref := (1..TIME_CANCEL) * {0}
                    || cancel_set_floor_up_2ref := (1..TIME_CANCEL) * {0}
                    || cancel_set_floor_down_2ref := (1..TIME_CANCEL) * {0}
                    || display_floor := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {((display_floor~(TRUE)) - 1) |-> TRUE}
                    || behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                    || status_work := TRUE
                    
                ELSE 
                    IF ((card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) = 0) or(card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & card(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) > 0 & min(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE})) < min(dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE}))))& current_direction = down THEN
                        current_floor := current_floor - 1
                        || current_direction := down
                        || display_direction_elevator := down
                        || cancel_set_2ref := (1..TIME_CANCEL) * {0}
                        || cancel_set_floor_up_2ref := (1..TIME_CANCEL) * {0}
                        || cancel_set_floor_down_2ref := (1..TIME_CANCEL) * {0}
                        || display_floor := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {(display_floor~(TRUE) - 1) |-> TRUE}
                        || behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                        || status_work := TRUE
                      
                    ELSE
                        current_floor := current_floor + 1
                        || current_direction := up
                        || display_direction_elevator := up
                        || cancel_set_2ref := (1..TIME_CANCEL) * {0}
                        || cancel_set_floor_up_2ref := (1..TIME_CANCEL) * {0}
                        || cancel_set_floor_down_2ref := (1..TIME_CANCEL) * {0}
                        || display_floor := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {(display_floor~(TRUE) + 1) |-> TRUE} 
                        || behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx + 1) |-> yy : behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE} <+ { xx,yy | xx : 0..(NUM_FLOOR - 1) & yy : {TRUE} & (xx - 1) |-> yy : behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE}}
                        || status_work := TRUE
                    END
                END
            END
        END
    END;



        
    //Implementado
    elevator_operation_request(user_orders) = 
    BEGIN
        VAR f1, flag IN
            f1 := 0;
            flag := TRUE;
            WHILE f1 < NUM_FLOOR
            DO
                IF f1 /= current_floor & display_floor(f1) = TRUE THEN
                    flag := FALSE        
                END;
                f1 := f1 + 1;
            INVARIANT
                f1 < NUM_FLOOR
            VARIANT 
                NUM_FLOOR - f1
            END
        END;
            
        IF
            display_floor(current_floor) = TRUE
            & f1 = TRUE
            & sensor_balance <= 450
            & sensor_balance > 0
            & user_orders : 1..NUM_FLOOR
            & status_operation = TRUE
            & btn_special(btn_phone) = FALSE THEN    
            
                IF (user_orders - current_floor) < 0 THEN
                    behavior_down_ref(current_floor - user_orders) := TRUE
                    ; btn_actions(user_orders) := TRUE
                ELSE
                    behavior_up_ref(user_orders - current_floor) := TRUE
                    ; btn_actions(user_orders) := TRUE
                END
        END
    END;



    // Implementado
    elevator_operation_alarm = 
    BEGIN
       VAR flag_btn_special IN
           flag_btn_special := btn_special(btn_alarm);
           IF flag_btn_special = FALSE & status_operation = TRUE & status_work = TRUE THEN
               btn_special(btn_alarm) := TRUE 
           END
       END
    END;
        
    // Implementado
    elevator_operation_report =
    BEGIN 
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_phone);
            IF flag_btn_special = FALSE & status_work = TRUE THEN
                btn_special := btn_special <+ {btn_phone |-> TRUE, btn_alarm |-> TRUE};
                status_operation := FALSE
            END
        END
    END;
    
    // Implementado
    elevator_operation_hold_door = 
    BEGIN
        IF status_work = FALSE & status_door = TRUE & status_operation = TRUE & alarm_door = FALSE THEN
            
            VAR ii, flag_ans IN 
                ii := 0;
                flag_ans := FALSE;
                WHILE ii < 8
                DO
                    IF behavior_up_ref(ii) = TRUE or behavior_down_ref(ii) = TRUE THEN
                        flag_ans := TRUE
                    END
                INVARIANT
                    ii <= 8
                VARIANT
                    8 - ii
                END;
                 IF time_door = 10 & flag_ans = TRUE THEN 
                    time_door := 1;
                    alarm_door := TRUE;
                    sensor_pir := TRUE
                ELSE IF flag_ans = TRUE THEN
                     sensor_pir := TRUE ;
                     status_door := TRUE;
                     time_door := time_door + 1
               ELSE
                 sensor_pir := TRUE;
                 status_door := TRUE;
                 time_door := 1
                END 
        
                END
                
            END
            
        END
        
    END;

    // Implementado
    elevator_operation_open_door = 
    BEGIN
        IF status_operation = TRUE & alarm_door = FALSE & current_direction = empty & sensor_balance > 0 THEN
            
            VAR ii, flag_ans IN 
                ii := 0;
                flag_ans := FALSE;
                WHILE ii < 8
                DO
                    IF behavior_up_ref(ii) = TRUE or behavior_down_ref(ii) = TRUE THEN
                        flag_ans := TRUE
                    END
                INVARIANT
                    ii <= 8
                VARIANT
                    8 - ii
                END;
                IF time_door = 10 & flag_ans = TRUE THEN 
                    time_door := 1;
                    alarm_door := TRUE;
                    btn_special := btn_special <+ {btn_open |-> FALSE, btn_close |-> FALSE};
                    status_work := FALSE
                ELSE IF flag_ans = TRUE THEN
                    btn_special := btn_special <+ {btn_open |-> TRUE, btn_close |-> FALSE};
                    status_door := TRUE;
                    time_door := time_door + 1;
                    status_work := FALSE
                   ELSE
                    btn_special := btn_special <+ {btn_open |-> TRUE, btn_close |-> FALSE};
                    status_door := TRUE;
                    time_door := 1;
                    status_work := FALSE
               
                    END 
                END  
                
            END      
        
        END
    END;

    // Implementado
    elevator_operation_close_door = 
    BEGIN
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_close);
            IF (flag_btn_special = FALSE & status_work = FALSE & status_operation = TRUE & status_door = TRUE & sensor_pir = FALSE) or alarm_door = TRUE THEN
                btn_special := btn_special <+ {btn_open |-> FALSE, btn_close |-> TRUE}
                ; status_door := FALSE
                ; alarm_door := FALSE
                ; time_door := 1
                ; status_work := TRUE
            END
        END
    END;

    // Implementado
    elevator_operation_let_go = 
    BEGIN
        IF sensor_pir = TRUE THEN 
            sensor_pir := FALSE;
            time_door := 1    
        END
    END;
    
    // Implementado
    elevator_operation_break_to_repair =
    BEGIN
        IF status_operation = FALSE & ask_to_repair = TRUE THEN
            VAR flag_behavior,ii IN
                flag_behavior := TRUE; // vai checar se nao tem requisicao 
                ii := 0;
                WHILE ii < NUM_FLOOR
                DO
                    IF behavior_up_ref(ii) = TRUE or behavior_down_ref(ii) = TRUE THEN
                        flag_behavior := FALSE    
                    END;
                    ii := ii + 1
                INVARIANT
                    ii < NUM_FLOOR
                VARIANT
                    NUM_FLOOR - ii
                END;
                
                IF flag_behavior = TRUE or current_direction = empty THEN
                    status_work := FALSE
                    ; display_direction_elevator := empty
                    ; ask_to_repair := FALSE
                    ; behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                    ; behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                    ; people_in_elevator_2ref := (0..QTD-1) * {0}
                    ; ptr_qtd := 1
                    ; sensor_balance := 0
                    ; sensor_pir := FALSE
                ELSE
                   IF (current_direction = up & current_floor /= NUM_FLOOR) or (current_floor = 1) THEN
                       // vai para o pavimento acima
                        status_work := FALSE
                        ; current_floor := current_floor + 1 
                        ; display_floor := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {current_floor |-> TRUE}
                        ; current_direction := empty
                        ; display_direction_elevator := empty
                        ; ask_to_repair := FALSE
                        ; behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                        ; behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                        ; people_in_elevator_2ref := (0..QTD-1) * {0}
                        ; ptr_qtd := 1
                        ; sensor_balance := 0
                        ; sensor_pir := FALSE
                   ELSE IF (current_direction = down & current_floor /= 1) or (current_floor = NUM_FLOOR) THEN
                        status_work := FALSE
                        ; current_floor := current_floor - 1 
                        ; display_floor := ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {current_floor |-> TRUE}
                        ; current_direction := empty
                        ; display_direction_elevator := empty
                        ; ask_to_repair := FALSE
                        ; behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                        ; behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                        ; people_in_elevator_2ref := (0..QTD-1) * {0}
                        ; ptr_qtd := 1
                        ; sensor_balance := 0
                        ; sensor_pir := FALSE
                    END
                   END
                END
                
            END
        END
    END;
    
    // Implementado
    elevator_operation_repaired =
    BEGIN
        IF status_operation = FALSE & status_work = FALSE THEN
            current_direction := empty
            ; status_door := TRUE
            ; status_work := FALSE
            ; status_operation := TRUE
            ; btn_actions := (0..NUM_FLOOR-1) * {FALSE} // relação com o elevador
            ; btn_special := ELEVATOR_SPECIAL_BUTTONS * {FALSE} // relação com o elevador
            ; display_floor :=  (0..NUM_FLOOR-1) * {FALSE} <+ {current_floor |-> TRUE} // relação com o elevador
            ; time_door := 1
            ; sensor_pir := FALSE
            ; sensor_balance := 0
            ; display_direction_elevator := empty
            ; ask_to_repair := FALSE
            ; people_in_elevator_2ref := (0..QTD-1) * {0}
            ; ptr_qtd := 1
            ; behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
            ; behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
            ; floor_leds_up := ELEVATOR_ORDINARY_BUTTONS * {FALSE}
            ; floor_leds_down := ELEVATOR_ORDINARY_BUTTONS * {FALSE}
            ; cancel_set_2ref := (0..TIME_CANCEL-1) * {0}
            ; cancel_set_floor_up_2ref := (0..TIME_CANCEL-1) * {0}
            ; cancel_set_floor_down_2ref := (0..TIME_CANCEL-1) * {0}
            ; state_blink := (0..NUM_FLOOR-1)  * {FALSE}
            ; alarm_door := FALSE
        END
    END;

    // Implementado
    enter_elevator(weight) = 
    BEGIN
        IF weight > 0 & status_work = FALSE & status_door = TRUE & status_operation = TRUE & alarm_door = FALSE & ptr_qtd < 10 THEN
            sensor_balance := sensor_balance + weight;
            people_in_elevator_2ref := people_in_elevator_2ref <+ {ptr_qtd |-> weight};
            ptr_qtd := ptr_qtd + 1
        END
    END;
    
    // Implementado
    exit_elevator =
    BEGIN 
        VAR ii, flag_ans IN
            ii := 0;
            flag_ans := FALSE;
            
            WHILE ii < QTD
            DO
                IF people_in_elevator_2ref(ii) /= 0 THEN
                    flag_ans := TRUE  
                END
            INVARIANT
                ii < QTD
            VARIANT
                QTD - ii
            END;
            
            IF flag_ans = TRUE & status_door = TRUE & status_operation = TRUE & status_work = FALSE & alarm_door = FALSE THEN
                sensor_balance := sensor_balance - people_in_elevator_2ref(ptr_qtd - 1);
                people_in_elevator_2ref(ptr_qtd - 1) := 0;
                ptr_qtd := ptr_qtd - 1
            END
        END
        
    END;


    // Implementado
    get_phone_call_from_elevator =
    BEGIN
        VAR flag_btn_special IN
           flag_btn_special := btn_special(btn_phone);
           IF flag_btn_special = TRUE THEN
              btn_special := btn_special <+ {btn_phone |-> FALSE, btn_alarm |-> FALSE};
              ask_to_repair := TRUE;
              status_operation := FALSE
           END
        END
    END;

    // Implementado
    intermediary_call_elevator(number_floor, direction) =
    BEGIN
       IF number_floor > 1 & number_floor < NUM_FLOOR & direction : ELEVATOR_DIRECTIONS & direction /= empty & status_operation = TRUE & btn_special(btn_phone) = FALSE ((direction = up & floor_leds_up(number_floor) = FALSE) or (direction = down & floor_leds_down(number_floor) = FALSE)) & number_floor /= current_floor THEN
           IF sensor_pir = FALSE THEN
            IF (number_floor - current_floor) < 0 THEN
                IF direction = up THEN
                    behavior_down_ref(current_floor - number_floor) := TRUE
                    ; status_door := FALSE
                    ; status_work := TRUE
                    ; floor_leds_up(number_floor) := TRUE
                ELSE
                    behavior_down_ref(current_floor - number_floor) := TRUE
                    ; status_door := FALSE
                    ; status_work := TRUE
                    ; floor_leds_down(number_floor) := TRUE
                END
            ELSE 
                IF direction = up THEN
                    behavior_up_ref(number_floor - current_floor) := TRUE
                    ; status_door := FALSE
                    ; status_work := TRUE
                    ; floor_leds_up(number_floor) := TRUE
                ELSE
                    behavior_up_ref(number_floor - current_floor) := TRUE
                    ; status_door := FALSE
                    ; status_work := TRUE
                    ; floor_leds_down(number_floor) := TRUE
                END
            END
        ELSE
            IF (number_floor - current_floor) < 0 THEN
                IF direction = up THEN
                    behavior_down_ref(current_floor - number_floor) := TRUE
                    ; status_door := TRUE
                    ; status_work := FALSE
                    ; floor_leds_up(number_floor) := TRUE
                ELSE
                    behavior_down_ref(current_floor - number_floor) := TRUE
                    ; status_door := TRUE
                    ; status_work := FALSE
                    ; floor_leds_down(number_floor) := TRUE
                END
            ELSE 
                IF direction = up THEN
                    behavior_up_ref(number_floor - current_floor) := TRUE
                    ; status_door := TRUE
                    ; status_work := FALSE
                    ; floor_leds_up(number_floor) := TRUE
                ELSE
                    behavior_up_ref(number_floor - current_floor) := TRUE
                    ; status_door := TRUE
                    ; status_work := FALSE
                    ; floor_leds_down(number_floor) := TRUE
                END
            END
        END
       END
    END;

    // Implementado
    ground_floor_call_elevator = 
    BEGIN
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_phone);
                IF flag_btn_special = FALSE & status_operation = TRUE THEN
                    IF sensor_pir = TRUE THEN
                    behavior_down_ref(current_floor - 1) := TRUE
                    ; floor_leds_up(1) := TRUE
                    ; status_door := TRUE
                    ; status_work := FALSE
                ELSE
                    behavior_down_ref(current_floor - 1) := TRUE
                    ; floor_leds_up(1) := TRUE
                    ; status_door := FALSE
                    ; status_work := TRUE
                
                END
            END
        END
    END;
    
    // Implementado
    last_floor_call_elevator = 
    BEGIN
        VAR flag_btn_special IN
            flag_btn_special := btn_special(btn_phone);
            IF status_operation = TRUE & flag_btn_special = FALSE THEN
                IF sensor_pir = TRUE THEN
                behavior_up_ref(NUM_FLOOR - current_floor) := TRUE
                ; floor_leds_down(NUM_FLOOR) := TRUE
                ; status_door := TRUE
                ; status_work := FALSE
            ELSE
                behavior_up_ref(NUM_FLOOR - current_floor) := TRUE
                ; floor_leds_down(NUM_FLOOR) := TRUE
                ; status_door := FALSE
                ; status_work := TRUE
            END
            END
        END
    END;
    
    // Implementado
    cancel(num_floor) =
    BEGIN
        VAR flag_btn_actions IN
            flag_btn_actions := btn_actions(num_floor);
            IF num_floor > 0 & flag_btn_actions = TRUE & status_operation = TRUE THEN
                IF ran(cancel_set_2ref) = {num_floor}  THEN
                    IF card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}) \/ dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) = 1 THEN
                        state_blink(num_floor) := TRUE
                    ELSE IF (num_floor - current_floor) < 0 THEN
                        behavior_down_ref(current_floor - num_floor) := FALSE
                        ; btn_actions(num_floor) := FALSE
                        ; current_direction := empty
                        ; display_direction_elevator := empty
                        ; state_blink(num_floor) := FALSE
                    ELSE 
                        behavior_up_ref(num_floor - current_floor) := FALSE
                        ; btn_actions(num_floor) := FALSE
                        ; current_direction := empty
                        ; display_direction_elevator := empty
                        ; state_blink(num_floor) := FALSE
                    END
                    END
                ELSE IF time < 2 THEN
                    time := time + 1;
                    cancel_set_2ref := cancel_set_2ref <+ {time |-> num_floor};
                    state_blink(num_floor) := FALSE
                ELSE 
                    time := 1;
                    cancel_set_2ref := cancel_set_2ref <+ {time |-> num_floor};
                    state_blink(num_floor) := FALSE
                END
            END
        END
    END;
    
    cancel_floor(num_floor, direction) =
    PRE 
        num_floor : NAT
        & direction : ELEVATOR_DIRECTIONS 
        & num_floor /= current_floor 
        & ((direction = up) => (floor_leds_up(num_floor) = TRUE)) 
        & ((direction = down) => (floor_leds_down(num_floor) = TRUE))
        & status_operation = TRUE
        & direction /= empty
    THEN
        IF direction = up THEN
            IF ran(cancel_set_floor_up_2ref) = {num_floor} THEN
                IF card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}) \/ dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) = 1 THEN
                    IF current_direction = up THEN
                        behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                        || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                        || floor_leds_up(num_floor) := FALSE
                        || floor_leds_down(num_floor) := FALSE
                        || current_direction := empty
                        || display_direction_elevator := empty
                        || current_floor := current_floor + 1 
                        || display_floor :=  ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {display_floor~(TRUE) +1 |-> TRUE}
                        
                     ELSE IF current_direction = down THEN
                        behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                        || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                        || floor_leds_up(num_floor) := FALSE
                        || floor_leds_down(num_floor) := FALSE
                        || current_direction := empty
                        || display_direction_elevator := empty
                        || current_floor := current_floor - 1
                        || display_floor :=  ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {display_floor~(TRUE) -1 |-> TRUE}
                         
                     ELSE
                        behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                        || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                        || floor_leds_up(num_floor) := FALSE
                        || floor_leds_down(num_floor) := FALSE
                        || current_direction := empty
                        || display_direction_elevator := empty
                         
                   
                     END
                END
                
                ELSE IF current_floor > num_floor THEN
                    behavior_down_ref(current_floor - num_floor) := FALSE
                    || floor_leds_up(num_floor) := FALSE
                    || floor_leds_down(num_floor) := FALSE
                    || current_direction := empty
                    || display_direction_elevator := empty
           
                ELSE 
                    behavior_up_ref(num_floor - current_floor) := FALSE
                    || floor_leds_up(num_floor) := FALSE
                    || floor_leds_down(num_floor) := FALSE
                    || current_direction := empty
                    || display_direction_elevator := empty
           
                END
                END
                
            ELSE IF time_floor_up < 2 THEN
                time_floor_up := time_floor_up + 1;
                cancel_set_floor_up_2ref := cancel_set_floor_up_2ref <+ {time_floor_up |-> num_floor}
               
            ELSE 
                time_floor_up := 1;
                cancel_set_floor_up_2ref := cancel_set_floor_up_2ref <+ {time_floor_up |-> num_floor}
            END
            END
        ELSE
            IF ran(cancel_set_floor_down_2ref) = {num_floor} THEN 
                    IF card(dom(behavior_up_ref /\ (0..NUM_FLOOR-1) * {TRUE}) \/ dom(behavior_down_ref /\ (0..NUM_FLOOR-1) * {TRUE})) = 1 THEN
                        IF current_direction = up THEN
                            behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                            || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                            || floor_leds_up(num_floor) := FALSE
                            || floor_leds_down(num_floor) := FALSE
                            || current_direction := empty
                            || display_direction_elevator := empty
                            || current_floor := current_floor + 1 
                            || display_floor :=  ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {display_floor~(TRUE) +1 |-> TRUE}
                            
                         ELSE IF current_direction = down THEN
                            behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                            || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                            || floor_leds_up(num_floor) := FALSE
                            || floor_leds_down(num_floor) := FALSE
                            || current_direction := empty
                            || display_direction_elevator := empty
                            || current_floor := current_floor - 1
                            || display_floor :=  ELEVATOR_FLOOR_DISPLAY * {FALSE} <+ {display_floor~(TRUE) -1 |-> TRUE}
                             
                         ELSE
                            behavior_up_ref := (0..NUM_FLOOR-1) * {FALSE}
                            || behavior_down_ref := (0..NUM_FLOOR-1) * {FALSE}
                            || floor_leds_up(num_floor) := FALSE
                            || floor_leds_down(num_floor) := FALSE
                            || current_direction := empty
                            || display_direction_elevator := empty
                             
                       
                         END
                    END
                    
                    ELSE IF current_floor > num_floor  THEN
                        behavior_down_ref(current_floor - num_floor) := FALSE
                        || floor_leds_up(num_floor) := FALSE
                        || floor_leds_down(num_floor) := FALSE
                        || current_direction := empty
                        || display_direction_elevator := empty
               
                    ELSE 
                        behavior_up_ref(num_floor - current_floor) := FALSE
                        || floor_leds_up(num_floor) := FALSE
                        || floor_leds_down(num_floor) := FALSE
                        || current_direction := empty
                        || display_direction_elevator := empty
               
                    END
                    END
                    
                ELSE IF time_floor_down < 2 THEN
                    time_floor_down := time_floor_down + 1;
                    cancel_set_floor_down_2ref := cancel_set_floor_down_2ref <+ {time_floor_down |-> num_floor}
                    
                ELSE
                    time_floor_down := 1;
                    cancel_set_floor_down_2ref := cancel_set_floor_down_2ref <+ {time_floor_down |-> num_floor}
                END
                END
         END       
     END

 END